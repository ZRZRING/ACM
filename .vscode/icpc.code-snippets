{
	"ICPC Temple": {
		"scope": "cpp",
		"prefix": "icpc",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"using i64 = long long;",
			"",
			"#define endl '\\n'",
			"#define A2 std::array<int, 2>",
            "#define lowbit(x) ((x) & -(x))",
			"#define NO return (void)(std::cout << \"NO\" << endl)",
			"#define YES return (void)(std::cout << \"YES\" << endl)",
			"#define Fast_IOS std::ios::sync_with_stdio(false), std::cin.tie(0), std::cout.tie(0)",
			// "#define debug(x) std::cerr << \"In Line \" << __LINE__ << \" the \" << #x << \" = \" << x << '\\n';",
            "",
			"const i64 mod = 998244353;",
            "",
            "template <class T> T lg(T x) {return (T)log10(x);}",
            "template <class T> T log(T x) {return (T)log2(x);}",
            "template <class T> T abs(T x) {return x < 0 ? -x : x;}",
            "template <class T> T mysqrt(T x) {return std::floor(sqrtl(x));}",
            "template <class T> T MOD(T &x, i64 p = mod) {return x = (x % p + p) % p;}",
            "template <class T> T MOD(T &&x, i64 p = mod) {return x = (x % p + p) % p;}",
            "template <class T1, class T2> T1 getbit(T1 x, T2 t) {return x >> t & 1ll;}",
			"",
            "class WORK {",
            "public:",
            "\tint N;",
            "",
            "\tWORK() {}",
            "",
			"\tvoid solve() {",
			"\t\t$0",
			"\t}",
            "};",
			"",
			"int main() {",
			"\tFast_IOS;",
            "\tWORK work;",
			"\tint T = 1;",
			"\t// std::cin >> T;",
			"\twhile (T--) {",
			"\t\twork.solve();",
			"\t}",
			"\treturn 0;",
			"}",
		],
		"description": "RMQ Temple"
	},

	"RMQ Temple": {
		"scope": "cpp",
		"prefix": "RMQ",
		"body": [
			"struct RMQ {",
			"\tint n;",
			"\t",
			"\tstd::vector<std::array<int, 30>> fmin, fmax;",
			"\t",
			"\tRMQ(std::vector<int> a) {",
			"\t\tn = a.size() - 1;",
			"\t\tfmin.resize(n + 1);",
			"\t\tfmax.resize(n + 1);",
			"\t\tfor (int i = 1; i <= n; i++) {",
			"\t\t\tfmin[i][0] = fmax[i][0] = a[i];",
			"\t\t}",
			"\t\tfor (int i = 1; i < 30; i++) {",
			"\t\t\tif (1 << i > n) break;",
			"\t\t\tfor (int j = 1; j + (1 << i) - 1 <= n; j++) {",
			"\t\t\t\tfmin[j][i] = std::min(fmin[j][i - 1], fmin[j + (1 << i - 1)][i - 1]);",
			"\t\t\t\tfmax[j][i] = std::max(fmax[j][i - 1], fmax[j + (1 << i - 1)][i - 1]);",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"\t",
			"\tint max(int l, int r) {",
			"\t\tint k = log(r - l + 1);",
			"\t\treturn std::max(fmax[l][k], fmax[r - (1 << k) + 1][k]);",
			"\t}",
			"\t",
			"\tint min(int l, int r) {",
			"\t\tint k = log(r - l + 1);",
			"\t\treturn std::min(fmin[l][k], fmin[r - (1 << k) + 1][k]);",
			"\t}",
			"};"
		],
		"description": "RMQ Temple"
	},
	"LCA Temple": {
        "scope": "cpp",
        "prefix": "LCA",
        "body": [
            "struct TREE {",
            "\tint n, flag = 0;",
            "",
            "\tstd::vector<std::vector<int>> e, fa;",
            "\t",
            "\tstd::vector<int> dep;",
            "\t",
            "\tTREE(int n) : n(n) {",
            "\t\te.resize(n);",
            "\t\tfa.resize(n);",
            "\t\tdep.resize(n);",
            "\t\tfor (int i = 0; i < n; i++) {",
            "\t\t\tfa[i].resize(21);",
            "\t\t}",
            "\t}",
            "",
            "\tvoid add(int u, int v) {",
            "\t\te[u].push_back(v);",
            "\t\te[v].push_back(u);",
            "\t}",
            "",
            "\tvoid dfs(int u, int last) {",
			"\t\tdep[u] = dep[last] + 1",
            "\t\tfor (int i = 1; i <= 20; i++) {",
            "\t\t\tif (!fa[u][i - 1]) break;",
            "\t\t\tfa[u][i] = fa[fa[u][i - 1]][i - 1];",
            "\t\t}",
            "\t\tfor (auto v : e[u]) {",
            "\t\t\tif (v == fa[u][0]) continue;",
            "\t\t\tfa[v][0] = u;",
            "\t\t\tdfs(v, u);",
            "\t\t}",
            "\t}",
            "",
            "\tint lca(int x, int y) {",
            "\t\tfor (int i = dep[x] - dep[y], j = 0; i > 0; i >>= 1, j++) {",
            "\t\t\tif (i & 1) x = fa[x][j];",
            "\t\t}",
            "\t\tfor (int i = dep[y] - dep[x], j = 0; i > 0; i >>= 1, j++) {",
            "\t\t\tif (i & 1) y = fa[y][j];",
            "\t\t}",
            "\t\tif (x != y) {",
            "\t\t\tfor (int i = 20; i >= 0; i--) {",
            "\t\t\t\tif (fa[x][i] == fa[y][i]) continue;",
            "\t\t\t\tx = fa[x][i];",
            "\t\t\t\ty = fa[y][i];",
            "\t\t\t}",
            "\t\t\tx = fa[x][0];",
            "\t\t}",
            "\t\treturn x;",
            "\t};",
            "};"
        ],
        "description": "LCA Temple"
    },
	"qpow Temple": {
        "scope": "cpp",
        "prefix": "qpow",
        "body": [
            "i64 qpow(i64 a, i64 x = mod - 2) {",
            "\ta %= mod;",
            "\tx %= mod - 1;",
            "\ti64 res = 1;",
            "\twhile (x) {",
            "\t\tif (x & 1) res = res * a % mod;",
            "\t\ta = a * a % mod;",
            "\t\tx >>= 1;",
            "\t}",
            "\treturn res;",
            "}"
        ],
        "description": "qpow Temple"
    },
	"DSU Temple": {
        "scope": "cpp",
        "prefix": "DSU",
        "body": [
            "struct DSU {",
            "\tint n;",
            "",
            "\tstd::vector<int> fa, size;",
            "",
            "\tDSU(int n) : n(n) {",
            "\t\tfa.resize(n + 1);",
            "\t\tsize.resize(n + 1);",
            "\t\tstd::iota(fa.begin(), fa.end(), 0);",
            "\t\tstd::fill(size.begin(), size.end(), 1);",
            "\t}",
            "",
            "\tint find(int x) {",
            "\t\treturn x == fa[x] ? x : fa[x] = find(fa[x]);",
            "\t}",
            "",
            "\tint merge(int x, int y) {",
            "\t\tx = find(x); y = find(y);",
            "\t\tif (x == y) return 0;",
            "\t\tfa[x] = y;",
            "\t\tsize[y] += size[x];",
            "\t\treturn 1;",
            "\t}",
            "};"
        ],
        "description": "DSU Temple"
    },
    "SET MID": {
        "scope": "cpp",
        "prefix": "setmid",
        "body": [
            "template<typename cmp>",
            "struct DELHEAP {",
            "\ti64 sum = 0;",
            "",
            "\tstd::priority_queue<int, std::vector<int>, cmp> q, d;",
            "",
            "\tint size() {",
            "\t\treturn q.size() - d.size();",
            "\t}",
            "",
            "\tbool empty() {",
            "\t\treturn size() == 0;",
            "\t}",
            "",
            "\tvoid push(int x) {",
            "\t\tq.push(x);",
            "\t\tsum += x;",
            "\t}",
            "",
            "\tvoid erase(int x) {",
            "\t\td.push(x);",
            "\t\tsum -= x;",
            "\t}",
            "",
            "\tint top() {",
            "\t\twhile (!q.empty() && !d.empty() && q.top() == d.top()) {",
            "\t\t\tq.pop();",
            "\t\t\td.pop();",
            "\t\t}",
            "\t\treturn q.top();",
            "\t}",
            "\t",
            "\tvoid pop() {",
            "\t\terase(q.top());",
            "\t}",
            "};",
            "",
            "struct SET_MID {",
            "\tDELHEAP<std::less<int>> L;",
            "\tDELHEAP<std::greater<int>> R;",
            "",
            "\tvoid adjust() {",
            "\t\twhile (L.size() > R.size()) {",
            "\t\t\tR.push(L.top());",
            "\t\t\tL.pop();",
            "\t\t}",
            "\t\twhile (R.size() > L.size()) {",
            "\t\t\tL.push(R.top());",
            "\t\t\tR.pop();",
            "\t\t}",
            "\t}",
            "",
            "\tvoid insert(int x) {",
            "\t\tif (L.empty() || x <= L.top()) {",
            "\t\t\tL.push(x);",
            "\t\t} else {",
            "\t\t\tR.push(x);",
            "\t\t}",
            "\t\tadjust();",
            "\t}",
            "",
            "\tvoid erase(int x) {",
            "\t\tif (x <= L.top()) {",
            "\t\t\tL.erase(x);",
            "\t\t} else {",
            "\t\t\tR.erase(x);",
            "\t\t}",
            "\t\tadjust();",
            "\t}",
            "",
            "\ti64 sum() {",
            "\t\t// std::cout << L.sum << ' ' << R.sum << endl;",
            "\t\ti64 res = R.sum - L.sum;",
            "\t\tif (L.size() > R.size()) {",
            "\t\t\tres += L.top();",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "};"
        ],
        "description": "Dynamic maintain median values."
    }
}